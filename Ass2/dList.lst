     1                                  
     2                                  %macro initialFunc 0
     3                                      pushad
     4                                      push ebp
     5                                      mov ebp, esp
     6                                      inc dword [counter]
     7                                  %endmacro
     8                                  
     9                                  %macro finishingFunc 0
    10                                      mov esp, ebp
    11                                      pop ebp
    12                                      popad
    13                                      jmp getInput
    14                                  %endmacro
    15                                  section .bss
    16 00000000 <res 00000050>              input: resb 80            ; input - max 80 bytes
    17 00000050 <res 00000050>              cleaninput: resb 80
    18 000000A0 <res 00000014>              opStack: resb 5*4         ; operands stack
    19 000000B4 <res 00000004>              opSp: resb 4              ; operands stack pointer
    20 000000B8 <res 00000004>              nPTR: resb 4
    21 000000BC <res 00000004>              index: resb 4
    22                                  section .data
    23 00000000 00000000                    counter: dd 0           ; operation counter
    24                                  section .rodata
    25 00000000 63616C633A2000              pCalc: db 'calc: ', 0
    26 00000007 44454255470A00              pDebug: db 'DEBUG',10, 0
    27                                      nData: equ 0
    28                                      nNext: equ 1
    29                                  
    30                                  section .text
    31                                    align 16
    32                                    global main
    33                                    extern printf
    34                                    extern fprintf
    35                                    extern fflush
    36                                    extern malloc
    37                                    extern calloc
    38                                    extern free
    39                                   ; extern gets
    40                                    extern getchar
    41                                    extern fgets
    42                                    extern stdin
    43                                  main:
    44 00000000 55                          push ebp
    45 00000001 89E5                        mov ebp, esp
    46 00000003 C705[B4000000]-             mov [opSp], dword opStack ; initialize operand stack pointer
    46 00000009 [A0000000]         
    47 0000000D 60                          pushad
    48                                  
    49                                  getInput:
    50                                  
    51 0000000E 68[00000000]                push dword pCalc
    52 00000013 E8(00000000)                call printf
    53 00000018 83C404                      add esp, 4                ; skip 1 param
    54 0000001B 61                          popad
    55                                  
    56 0000001C FF35[00000000]              push dword [stdin]        ; get first argument
    57 00000022 6A50                        push dword 80
    58 00000024 68[00000000]                push dword input
    59 00000029 E8(00000000)                call fgets                ; return into eax \ input variable
    60 0000002E 83C40C                      add esp, dword 12         ; ????????????????? WHAT THE HECK
    61                                  
    62 00000031 8A1D[00000000]              mov bl, byte [input]
    63                                  
    64 00000037 80FB71                      cmp bl,'q'                ; if input is quit
    65 0000003A 0F845E010000                je finish
    66                                  
    67 00000040 80FB2B                      cmp bl,'+'                ; if input is addition
    68 00000043 0F84B3000000                jz addition
    69                                  
    70 00000049 80FB64                      cmp bl,'d'                ; if input is duplicate
    71 0000004C 0F84DA000000                jz duplicate
    72                                  
    73 00000052 80FB70                      cmp bl,'p'                ; if input is pop and print
    74 00000055 0F84E4000000                jz popAndPrint
    75                                  
    76 0000005B 80FB26                      cmp bl,'&'                ; if input bitwise and
    77 0000005E 0F84EE000000                jz bitwiseAnd
    78                                  
    79 00000064 80FB7C                      cmp bl,'|'                ; if input is or
    80 00000067 0F84F8000000                jz bitwiseOr
    81                                  
    82 0000006D 80FB6E                      cmp bl,'n'                ; if input number of hexadecimal digits
    83 00000070 0F8402010000                jz numOfDigits
    84                                  
    85 00000076 80FB2A                      cmp bl,'*'                ; if input is multipication
    86 00000079 0F840C010000                jz multipiction
    87                                  
    88                                      ; if reached here, input is a number
    89                                  
    90                                  isNum:
    91 0000007F 68[50000000]                push cleaninput
    92 00000084 68[00000000]                push input
    93 00000089 E814000000                  call createLinkList
    94 0000008E 8B1D[B4000000]              mov ebx, [opSp]
    95 00000094 8903                        mov [ebx], eax
    96 00000096 8305[B4000000]04            add [opSp], dword 4
    97 0000009D E96CFFFFFF                  jmp getInput
    98                                  
    99                                  
   100                                      createLinkList:
   101                                          initialFunc
   101 000000A2 60                  <1>  pushad
   101 000000A3 55                  <1>  push ebp
   101 000000A4 89E5                <1>  mov ebp, esp
   101 000000A6 FF05[00000000]      <1>  inc dword [counter]
   102                                          skipZeroes:
   103 000000AC 8B4D08                              mov ecx, [ebp + 8]
   104 000000AF 8A19                                mov bl, [ecx]
   105 000000B1 80FB30                              cmp bl, 48
   106 000000B4 7503                                jnz createLinks
   107 000000B6 41                                  inc ecx
   108 000000B7 EBF3                                jmp skipZeroes
   109                                  
   110                                          createLinks:
   111 000000B9 00000000                            nextlink: dd 0
   112                                          createLink:
   113 000000BD 894D0C                              mov [ebp + 12], ecx
   114 000000C0 60                                  pushad
   115 000000C1 6A05                                push dword 5
   116 000000C3 E8(00000000)                        call malloc
   117 000000C8 83C404                              add esp, 4         ;eax - pointer to link, ecx - clean input
   118                                              ;mov ebx, nPTR
   119                                              ;mov ebx, eax
   120 000000CB 8A5D0C                              mov bl, [ebp + 12]     
   121 000000CE 8818                                mov [eax + nData] , bl
   122 000000D0 C74001[B9000000]                    mov [eax + nNext] , dword nextlink
   123 000000D7 A3[B9000000]                        mov [nextlink], eax
   124 000000DC 8B1D[B8000000]                      mov ebx, [nPTR]
   125 000000E2 891D[B4000000]                      mov [opSp] , ebx
   126 000000E8 BA[B8000000]                        mov edx, opSp + 4
   127 000000ED 8915[B4000000]                      mov [opSp] , edx 
   128                                              ;add [input],word 1
   129                                  
   130                                              ; push dword 5
   131                                              ; call malloc
   132                                              ; add esp, 4
   133                                              ; mov [nPTR], eax
   134                                              ; mov cx, input
   135                                              ; mov [nPTR + nData] , cx
   136                                              ; mov [nPTR + nNext] , dword 0
   137                                              ; mov ebx, [nPTR]
   138                                              ; mov [ opStack + 4 ] , ebx
   139                                  
   140                                              ; mov ebx, [opStack]
   141                                              ; mov [opSp] , ebx
   142                                              ; mov ebx, [nPTR]
   143                                              ; mov [opSp + nNext] , ebx
   144                                  
   145                                              finishingFunc
   145 000000F3 89EC                <1>  mov esp, ebp
   145 000000F5 5D                  <1>  pop ebp
   145 000000F6 61                  <1>  popad
   145 000000F7 E912FFFFFF          <1>  jmp getInput
   146                                  
   147                                  
   148                                  
   149                                  
   150                                  addition:
   151                                      initialFunc
   151 000000FC 60                  <1>  pushad
   151 000000FD 55                  <1>  push ebp
   151 000000FE 89E5                <1>  mov ebp, esp
   151 00000100 FF05[00000000]      <1>  inc dword [counter]
   152                                  
   153                                      ; push dword pDebug
   154                                      ; call printf
   155                                  
   156                                      ; mov esp, [opSp]
   157                                      ; mov ebp, esp
   158 00000106 A1[B4000000]                mov eax, [opSp]
   159 0000010B 8B1D[B8000000]              mov ebx, [opSp+4]
   160 00000111 01C3                        add ebx, eax
   161                                      ;mov eax ,[ebx+nData]
   162 00000113 53                          push ebx
   163 00000114 E8(00000000)                call printf
   164 00000119 68[07000000]                push dword pDebug
   165 0000011E E8(00000000)                call printf
   166                                      finishingFunc
   166 00000123 89EC                <1>  mov esp, ebp
   166 00000125 5D                  <1>  pop ebp
   166 00000126 61                  <1>  popad
   166 00000127 E9E2FEFFFF          <1>  jmp getInput
   167                                  duplicate:
   168                                      initialFunc
   168 0000012C 60                  <1>  pushad
   168 0000012D 55                  <1>  push ebp
   168 0000012E 89E5                <1>  mov ebp, esp
   168 00000130 FF05[00000000]      <1>  inc dword [counter]
   169                                  
   170                                      finishingFunc
   170 00000136 89EC                <1>  mov esp, ebp
   170 00000138 5D                  <1>  pop ebp
   170 00000139 61                  <1>  popad
   170 0000013A E9CFFEFFFF          <1>  jmp getInput
   171                                  popAndPrint:
   172                                      initialFunc
   172 0000013F 60                  <1>  pushad
   172 00000140 55                  <1>  push ebp
   172 00000141 89E5                <1>  mov ebp, esp
   172 00000143 FF05[00000000]      <1>  inc dword [counter]
   173                                  
   174                                      finishingFunc
   174 00000149 89EC                <1>  mov esp, ebp
   174 0000014B 5D                  <1>  pop ebp
   174 0000014C 61                  <1>  popad
   174 0000014D E9BCFEFFFF          <1>  jmp getInput
   175                                  
   176                                  bitwiseAnd:
   177                                      initialFunc
   177 00000152 60                  <1>  pushad
   177 00000153 55                  <1>  push ebp
   177 00000154 89E5                <1>  mov ebp, esp
   177 00000156 FF05[00000000]      <1>  inc dword [counter]
   178                                  
   179                                      finishingFunc
   179 0000015C 89EC                <1>  mov esp, ebp
   179 0000015E 5D                  <1>  pop ebp
   179 0000015F 61                  <1>  popad
   179 00000160 E9A9FEFFFF          <1>  jmp getInput
   180                                  
   181                                  bitwiseOr:
   182                                      initialFunc
   182 00000165 60                  <1>  pushad
   182 00000166 55                  <1>  push ebp
   182 00000167 89E5                <1>  mov ebp, esp
   182 00000169 FF05[00000000]      <1>  inc dword [counter]
   183                                  
   184                                      finishingFunc
   184 0000016F 89EC                <1>  mov esp, ebp
   184 00000171 5D                  <1>  pop ebp
   184 00000172 61                  <1>  popad
   184 00000173 E996FEFFFF          <1>  jmp getInput
   185                                  
   186                                  numOfDigits:
   187                                      initialFunc
   187 00000178 60                  <1>  pushad
   187 00000179 55                  <1>  push ebp
   187 0000017A 89E5                <1>  mov ebp, esp
   187 0000017C FF05[00000000]      <1>  inc dword [counter]
   188                                  
   189                                      finishingFunc
   189 00000182 89EC                <1>  mov esp, ebp
   189 00000184 5D                  <1>  pop ebp
   189 00000185 61                  <1>  popad
   189 00000186 E983FEFFFF          <1>  jmp getInput
   190                                  
   191                                  
   192                                  multipiction:
   193                                      initialFunc
   193 0000018B 60                  <1>  pushad
   193 0000018C 55                  <1>  push ebp
   193 0000018D 89E5                <1>  mov ebp, esp
   193 0000018F FF05[00000000]      <1>  inc dword [counter]
   194                                  
   195                                      finishingFunc
   195 00000195 89EC                <1>  mov esp, ebp
   195 00000197 5D                  <1>  pop ebp
   195 00000198 61                  <1>  popad
   195 00000199 E970FEFFFF          <1>  jmp getInput
   196                                  
   197                                  emptyStackErr:
   198                                  
   199                                  stackOverflowErr:
   200                                  
   201                                  finish:
   202                                      ; popad
   203 0000019E 89EC                        mov esp, ebp
   204 000001A0 5D                          pop ebp
   205                                  
   206 000001A1 B801000000                  mov eax,1
   207 000001A6 BB00000000                  mov ebx,0
   208 000001AB B900000000                  mov ecx,0
   209 000001B0 BA00000000                  mov edx,0
   210 000001B5 CD80                        int 0x80
   211                                  
   212                                  
   213                                  
