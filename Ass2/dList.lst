     1                                  
     2                                  %macro initialFunc 0
     3                                      pushad
     4                                      push ebp
     5                                      mov ebp, esp
     6                                      inc dword [counter]
     7                                  %endmacro
     8                                  
     9                                  %macro finishingFunc 0
    10                                      mov esp, ebp
    11                                      pop ebp
    12                                      popad
    13                                      jmp getInput
    14                                  %endmacro
    15                                  section .bss
    16 00000000 <res 00000050>              input: resb 80            ; input - max 80 bytes
    17 00000050 <res 00000014>              opStack: resb 5*4         ; operands stack
    18 00000064 <res 00000004>              opSp: resb 4              ; operands stack pointer
    19 00000068 <res 00000004>              counter: resb 4           ; operation counter
    20 0000006C <res 00000004>              nPTR: resb 4
    21 00000070 <res 00000004>              index: resb 4
    22                                  section .data
    23                                  
    24                                  section .rodata
    25 00000000 63616C633A2000              pCalc: db 'calc: ', 0
    26 00000007 44454255470A00              pDebug: db 'DEBUG',10, 0
    27                                      nData: equ 0
    28                                      nNext: equ 1
    29                                  
    30                                  section .text
    31                                    align 16
    32                                    global main
    33                                    extern printf
    34                                    extern fprintf
    35                                    extern fflush
    36                                    extern malloc
    37                                    extern calloc
    38                                    extern free
    39                                    extern gets
    40                                    extern getchar
    41                                    extern fgets
    42                                    extern stdin
    43                                  main:
    44 00000000 55                          push ebp
    45 00000001 89E5                        mov ebp, esp
    46 00000003 C705[64000000]-             mov [opSp], dword opStack ; initialize operand stack pointer
    46 00000009 [50000000]         
    47 0000000D 60                          pushad
    48                                  
    49                                  getInput:
    50                                  
    51 0000000E 68[00000000]                push dword pCalc
    52 00000013 E8(00000000)                call printf
    53 00000018 83C404                      add esp, 4                ; skip 1 param
    54 0000001B 61                          popad
    55                                  
    56 0000001C FF35[00000000]              push dword [stdin]        ; get first argument
    57 00000022 6A50                        push dword 80
    58 00000024 68[00000000]                push dword input
    59 00000029 E8(00000000)                call fgets                ; return into eax \ input variable
    60 0000002E 83C40C                      add esp, dword 12         ; ????????????????? WHAT THE HECK
    61                                  
    62 00000031 8A1D[00000000]              mov bl, byte [input]
    63                                  
    64 00000037 80FB71                      cmp bl,'q'                ; if input is quit
    65 0000003A 0F842F010000                je finish
    66                                  
    67 00000040 80FB2B                      cmp bl,'+'                ; if input is addition
    68 00000043 0F8484000000                jz addition
    69                                  
    70 00000049 80FB64                      cmp bl,'d'                ; if input is duplicate
    71 0000004C 0F84AB000000                jz duplicate
    72                                  
    73 00000052 80FB70                      cmp bl,'p'                ; if input is pop and print
    74 00000055 0F84B5000000                jz popAndPrint
    75                                  
    76 0000005B 80FB26                      cmp bl,'&'                ; if input bitwise and
    77 0000005E 0F84BF000000                jz bitwiseAnd
    78                                  
    79 00000064 80FB7C                      cmp bl,'|'                ; if input is or
    80 00000067 0F84C9000000                jz bitwiseOr
    81                                  
    82 0000006D 80FB6E                      cmp bl,'n'                ; if input number of hexadecimal digits
    83 00000070 0F84D3000000                jz numOfDigits
    84                                  
    85 00000076 80FB2A                      cmp bl,'*'                ; if input is multipication
    86 00000079 0F84DD000000                jz multipiction
    87                                  
    88                                      ; if reached here, input is a number
    89                                  
    90                                  createLinkedList:
    91                                      initialFunc
    91 0000007F 60                  <1>  pushad
    91 00000080 55                  <1>  push ebp
    91 00000081 89E5                <1>  mov ebp, esp
    91 00000083 FF05[68000000]      <1>  inc dword [counter]
    92                                      
    93                                      ; mov ecx, [input]
    94                                      ; mov eax ,0
    95                                      ; mov [index] , eax
    96                                      ; movToEnd:
    97                                      ; mov ebx, [index]
    98                                      ; add ebx, [input]
    99                                      ; cmp byte[ebx], 0x10
   100                                      ; jz createLink
   101                                      ; sub byte[input], 0x48
   102                                  
   103                                      ; inc byte input
   104                                      ; ;inc [index]
   105                                      ; jmp movToEnd
   106                                      createLink:
   107 00000089 6A05                            push dword 5
   108 0000008B E8(00000000)                    call malloc
   109 00000090 83C404                          add esp, 4
   110 00000093 A3[6C000000]                    mov [nPTR], eax
   111 00000098 B9[00000000]                    mov ecx, input
   112 0000009D 890D[6C000000]                  mov [nPTR + nData] , ecx
   113 000000A3 C705[6D000000]0000-             mov [nPTR + nNext] , dword 0
   113 000000AB 0000               
   114 000000AD 8B1D[6C000000]                  mov ebx, [nPTR]
   115 000000B3 891D[64000000]                  mov [opSp] , ebx
   116 000000B9 BA[68000000]                    mov edx, opSp + 4
   117 000000BE 8915[64000000]                  mov [opSp] , edx 
   118                                          ;add [input],word 1
   119                                  
   120                                          ; push dword 5
   121                                          ; call malloc
   122                                          ; add esp, 4
   123                                          ; mov [nPTR], eax
   124                                          ; mov cx, input
   125                                          ; mov [nPTR + nData] , cx
   126                                          ; mov [nPTR + nNext] , dword 0
   127                                          ; mov ebx, [nPTR]
   128                                          ; mov [ opStack + 4 ] , ebx
   129                                  
   130                                          ; mov ebx, [opStack]
   131                                          ; mov [opSp] , ebx
   132                                          ; mov ebx, [nPTR]
   133                                          ; mov [opSp + nNext] , ebx
   134                                  
   135                                          finishingFunc
   135 000000C4 89EC                <1>  mov esp, ebp
   135 000000C6 5D                  <1>  pop ebp
   135 000000C7 61                  <1>  popad
   135 000000C8 E941FFFFFF          <1>  jmp getInput
   136                                  
   137                                  
   138                                  
   139                                  
   140                                  addition:
   141                                      initialFunc
   141 000000CD 60                  <1>  pushad
   141 000000CE 55                  <1>  push ebp
   141 000000CF 89E5                <1>  mov ebp, esp
   141 000000D1 FF05[68000000]      <1>  inc dword [counter]
   142                                  
   143                                      ; push dword pDebug
   144                                      ; call printf
   145                                  
   146                                      ; mov esp, [opSp]
   147                                      ; mov ebp, esp
   148 000000D7 A1[64000000]                mov eax, [opSp]
   149 000000DC 8B1D[68000000]              mov ebx, [opSp+4]
   150 000000E2 01C3                        add ebx, eax
   151                                      ;mov eax ,[ebx+nData]
   152 000000E4 53                          push ebx
   153 000000E5 E8(00000000)                call printf
   154 000000EA 68[07000000]                push dword pDebug
   155 000000EF E8(00000000)                call printf
   156                                      finishingFunc
   156 000000F4 89EC                <1>  mov esp, ebp
   156 000000F6 5D                  <1>  pop ebp
   156 000000F7 61                  <1>  popad
   156 000000F8 E911FFFFFF          <1>  jmp getInput
   157                                  duplicate:
   158                                      initialFunc
   158 000000FD 60                  <1>  pushad
   158 000000FE 55                  <1>  push ebp
   158 000000FF 89E5                <1>  mov ebp, esp
   158 00000101 FF05[68000000]      <1>  inc dword [counter]
   159                                  
   160                                      finishingFunc
   160 00000107 89EC                <1>  mov esp, ebp
   160 00000109 5D                  <1>  pop ebp
   160 0000010A 61                  <1>  popad
   160 0000010B E9FEFEFFFF          <1>  jmp getInput
   161                                  popAndPrint:
   162                                      initialFunc
   162 00000110 60                  <1>  pushad
   162 00000111 55                  <1>  push ebp
   162 00000112 89E5                <1>  mov ebp, esp
   162 00000114 FF05[68000000]      <1>  inc dword [counter]
   163                                  
   164                                      finishingFunc
   164 0000011A 89EC                <1>  mov esp, ebp
   164 0000011C 5D                  <1>  pop ebp
   164 0000011D 61                  <1>  popad
   164 0000011E E9EBFEFFFF          <1>  jmp getInput
   165                                  
   166                                  bitwiseAnd:
   167                                      initialFunc
   167 00000123 60                  <1>  pushad
   167 00000124 55                  <1>  push ebp
   167 00000125 89E5                <1>  mov ebp, esp
   167 00000127 FF05[68000000]      <1>  inc dword [counter]
   168                                  
   169                                      finishingFunc
   169 0000012D 89EC                <1>  mov esp, ebp
   169 0000012F 5D                  <1>  pop ebp
   169 00000130 61                  <1>  popad
   169 00000131 E9D8FEFFFF          <1>  jmp getInput
   170                                  
   171                                  bitwiseOr:
   172                                      initialFunc
   172 00000136 60                  <1>  pushad
   172 00000137 55                  <1>  push ebp
   172 00000138 89E5                <1>  mov ebp, esp
   172 0000013A FF05[68000000]      <1>  inc dword [counter]
   173                                  
   174                                      finishingFunc
   174 00000140 89EC                <1>  mov esp, ebp
   174 00000142 5D                  <1>  pop ebp
   174 00000143 61                  <1>  popad
   174 00000144 E9C5FEFFFF          <1>  jmp getInput
   175                                  
   176                                  numOfDigits:
   177                                      initialFunc
   177 00000149 60                  <1>  pushad
   177 0000014A 55                  <1>  push ebp
   177 0000014B 89E5                <1>  mov ebp, esp
   177 0000014D FF05[68000000]      <1>  inc dword [counter]
   178                                  
   179                                      finishingFunc
   179 00000153 89EC                <1>  mov esp, ebp
   179 00000155 5D                  <1>  pop ebp
   179 00000156 61                  <1>  popad
   179 00000157 E9B2FEFFFF          <1>  jmp getInput
   180                                  
   181                                  
   182                                  multipiction:
   183                                      initialFunc
   183 0000015C 60                  <1>  pushad
   183 0000015D 55                  <1>  push ebp
   183 0000015E 89E5                <1>  mov ebp, esp
   183 00000160 FF05[68000000]      <1>  inc dword [counter]
   184                                  
   185                                      finishingFunc
   185 00000166 89EC                <1>  mov esp, ebp
   185 00000168 5D                  <1>  pop ebp
   185 00000169 61                  <1>  popad
   185 0000016A E99FFEFFFF          <1>  jmp getInput
   186                                  
   187                                  emptyStackErr:
   188                                  
   189                                  stackOverflowErr:
   190                                  
   191                                  finish:
   192                                      ; popad
   193 0000016F 89EC                        mov esp, ebp
   194 00000171 5D                          pop ebp
   195                                  
   196 00000172 B801000000                  mov eax,1
   197 00000177 BB00000000                  mov ebx,0
   198 0000017C B900000000                  mov ecx,0
   199 00000181 BA00000000                  mov edx,0
   200 00000186 CD80                        int 0x80
   201                                  
   202                                  
   203                                  
