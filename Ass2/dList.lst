     1                                  
     2                                  %macro initialFunc 0
     3                                      pushad
     4                                      push ebp
     5                                      mov ebp, esp
     6                                      inc dword [counter]
     7                                  %endmacro
     8                                  
     9                                  %macro finishingFunc 0
    10                                      mov esp, ebp 
    11                                      pop ebp
    12                                      popad
    13                                      jmp getInput
    14                                  %endmacro
    15                                  section .bss
    16 00000000 <res 00000050>              input: resb 80                  ; input - max 80 bytes
    17 00000050 <res 00000014>              opStack: resb 5*4               ; operands stack
    18 00000064 <res 00000004>              opSp: resb 4                    ; operands stack pointer
    19 00000068 <res 00000004>              counter: resb 4                 ; operation counter
    20 0000006C <res 00000004>              nPTR: resb 4
    21 00000070 <res 00000004>              index: resb 4
    22                                  section .data
    23                                  
    24                                  section .rodata
    25 00000000 63616C633A2000              pCalc: db 'calc: ', 0
    26 00000007 44454255470A00              pDebug: db 'DEBUG',10, 0
    27                                      nData: equ 0
    28                                      nNext: equ 1
    29                                  
    30                                  section .text
    31                                    align 16
    32                                    global main
    33                                    extern printf
    34                                    extern fprintf
    35                                    extern fflush
    36                                    extern malloc
    37                                    extern calloc
    38                                    extern free
    39                                    extern gets
    40                                    extern getchar
    41                                    extern fgets
    42                                    extern stdin
    43                                  main:
    44 00000000 55                          push ebp
    45 00000001 89E5                        mov ebp, esp
    46 00000003 C705[64000000]-             mov [opSp], dword opStack       ; initialize operand stack pointer
    46 00000009 [50000000]         
    47 0000000D 60                          pushad
    48                                  
    49                                  getInput:
    50                                  
    51 0000000E 68[00000000]                push dword pCalc
    52 00000013 E8(00000000)                call printf
    53 00000018 83C404                      add esp, 4                      ;?????????????????WHAT THE HECK
    54 0000001B 61                          popad
    55                                  
    56 0000001C FF35[00000000]              push dword [stdin]              ; get first argument
    57 00000022 6A50                        push dword 80
    58 00000024 68[00000000]                push dword input
    59 00000029 E8(00000000)                call fgets                      ; return into eax \ input variable
    60 0000002E 83C40C                      add esp, dword 12              ;????????????????? WHAT THE HECK
    61                                  
    62 00000031 8A1D[00000000]              mov bl, byte [input]           ;
    63                                  
    64 00000037 80FB71                      cmp bl,'q'                     ;if input is quit
    65 0000003A 0F8418010000                jz finish
    66                                  
    67 00000040 80FB2B                      cmp bl,'+'                     ;if input is addition
    68 00000043 7479                        jz addition
    69                                  
    70 00000045 80FB64                      cmp bl,'d'                    ;if input is duplicate
    71 00000048 0F8498000000                jz duplicate
    72                                  
    73 0000004E 80FB70                      cmp bl,'p'                    ; if input is pop and print
    74 00000051 0F84A2000000                jz popAndPrint
    75                                  
    76 00000057 80FB26                      cmp bl,'&'                    ; if input bitwise and
    77 0000005A 0F84AC000000                jz bitwiseAnd
    78                                      
    79 00000060 80FB7C                      cmp bl,'|'                    ; if input is or
    80 00000063 0F84B6000000                jz bitwiseOr
    81                                  
    82 00000069 80FB6E                      cmp bl,'n'                    ; if input number of hexadecimal digits
    83 0000006C 0F84C0000000                jz numOfDigits
    84                                  
    85 00000072 80FB2A                      cmp bl,'*'                    ; if input is multipication
    86 00000075 0F84CA000000                jz multipiction
    87                                      
    88                                      ; if we reached here, input would be a number
    89                                  
    90                                  createLinkedList:
    91                                      ; mov ecx, [input]
    92                                      ; mov eax ,0
    93                                      ; mov [index] , eax
    94                                      ; movToEnd:
    95                                      ;     mov ebx, [index]
    96                                      ;     add ebx, [input]
    97                                      ;     cmp byte[ebx], 0x10
    98                                      ;     jz createLink
    99                                      ;     sub byte[input], 0x48
   100                                          
   101                                      ;     inc byte input
   102                                      ;     ;inc [index]
   103                                      ;     jmp movToEnd
   104                                      createLink:
   105 0000007B 6A05                            push dword 5
   106 0000007D E8(00000000)                    call malloc
   107 00000082 83C404                          add esp, 4
   108                                  
   109 00000085 A3[6C000000]                    mov [nPTR], eax
   110 0000008A 66B9[0000]                      mov cx, input
   111 0000008E 66890D[6C000000]                mov [nPTR + nData] , cx
   112 00000095 C705[6D000000]0000-             mov [nPTR + nNext] , dword 0
   112 0000009D 0000               
   113                                          mov [ opStack + 0] , [nPTR]
   113          ******************       error: invalid combination of opcode and operands
   114                                          inc input
   114          ******************       error: invalid combination of opcode and operands
   115 0000009F 6A05                            push dword 5
   116 000000A1 E8(00000000)                    call malloc
   117 000000A6 83C404                          add esp, 4
   118                                  
   119                                          mov nPTR, eax
   119          ******************       error: invalid combination of opcode and operands
   120 000000A9 66B9[0000]                      mov cx, input
   121 000000AD 66890D[6C000000]                mov [nPTR + nData] , cx
   122 000000B4 C705[6D000000]0000-             mov [nPTR + nNext] , dword 0
   122 000000BC 0000               
   123                                          mov [ opStack + 1] , [nPTR]
   123          ******************       error: invalid combination of opcode and operands
   124                                          mov [opSp] , [opStack]
   124          ******************       error: invalid combination of opcode and operands
   125                                          mov [opSp + nNext] , [nPTR]        
   125          ******************       error: invalid combination of opcode and operands
   126                                  
   127                                     
   128                                      
   129                                  
   130                                  addition:
   131                                      initialFunc
   131 000000BE 60                  <1>  pushad
   131 000000BF 55                  <1>  push ebp
   131 000000C0 89E5                <1>  mov ebp, esp
   131 000000C2 FF05[68000000]      <1>  inc dword [counter]
   132                                      
   133 000000C8 68[07000000]                push dword pDebug
   134 000000CD E8(00000000)                call printf
   135                                  
   136 000000D2 8B25[64000000]              mov esp, [opSp]
   137 000000D8 58                          pop eax
   138 000000D9 5B                          pop ebx
   139 000000DA 01C3                        add ebx, eax
   140 000000DC 53                          push ebx
   141                                  
   142                                      finishingFunc
   142 000000DD 89EC                <1>  mov esp, ebp
   142 000000DF 5D                  <1>  pop ebp
   142 000000E0 61                  <1>  popad
   142 000000E1 E928FFFFFF          <1>  jmp getInput
   143                                  duplicate:
   144                                      initialFunc
   144 000000E6 60                  <1>  pushad
   144 000000E7 55                  <1>  push ebp
   144 000000E8 89E5                <1>  mov ebp, esp
   144 000000EA FF05[68000000]      <1>  inc dword [counter]
   145                                  
   146                                      finishingFunc
   146 000000F0 89EC                <1>  mov esp, ebp
   146 000000F2 5D                  <1>  pop ebp
   146 000000F3 61                  <1>  popad
   146 000000F4 E915FFFFFF          <1>  jmp getInput
   147                                  popAndPrint:
   148                                      initialFunc
   148 000000F9 60                  <1>  pushad
   148 000000FA 55                  <1>  push ebp
   148 000000FB 89E5                <1>  mov ebp, esp
   148 000000FD FF05[68000000]      <1>  inc dword [counter]
   149                                  
   150                                      finishingFunc
   150 00000103 89EC                <1>  mov esp, ebp
   150 00000105 5D                  <1>  pop ebp
   150 00000106 61                  <1>  popad
   150 00000107 E902FFFFFF          <1>  jmp getInput
   151                                  
   152                                  bitwiseAnd:
   153                                      initialFunc
   153 0000010C 60                  <1>  pushad
   153 0000010D 55                  <1>  push ebp
   153 0000010E 89E5                <1>  mov ebp, esp
   153 00000110 FF05[68000000]      <1>  inc dword [counter]
   154                                  
   155                                      finishingFunc
   155 00000116 89EC                <1>  mov esp, ebp
   155 00000118 5D                  <1>  pop ebp
   155 00000119 61                  <1>  popad
   155 0000011A E9EFFEFFFF          <1>  jmp getInput
   156                                  
   157                                  bitwiseOr:
   158                                      initialFunc
   158 0000011F 60                  <1>  pushad
   158 00000120 55                  <1>  push ebp
   158 00000121 89E5                <1>  mov ebp, esp
   158 00000123 FF05[68000000]      <1>  inc dword [counter]
   159                                  
   160                                      finishingFunc
   160 00000129 89EC                <1>  mov esp, ebp
   160 0000012B 5D                  <1>  pop ebp
   160 0000012C 61                  <1>  popad
   160 0000012D E9DCFEFFFF          <1>  jmp getInput
   161                                  
   162                                  numOfDigits:
   163                                      initialFunc
   163 00000132 60                  <1>  pushad
   163 00000133 55                  <1>  push ebp
   163 00000134 89E5                <1>  mov ebp, esp
   163 00000136 FF05[68000000]      <1>  inc dword [counter]
   164                                  
   165                                      finishingFunc
   165 0000013C 89EC                <1>  mov esp, ebp
   165 0000013E 5D                  <1>  pop ebp
   165 0000013F 61                  <1>  popad
   165 00000140 E9C9FEFFFF          <1>  jmp getInput
   166                                      
   167                                  
   168                                  multipiction:
   169                                      initialFunc
   169 00000145 60                  <1>  pushad
   169 00000146 55                  <1>  push ebp
   169 00000147 89E5                <1>  mov ebp, esp
   169 00000149 FF05[68000000]      <1>  inc dword [counter]
   170                                  
   171                                      finishingFunc
   171 0000014F 89EC                <1>  mov esp, ebp
   171 00000151 5D                  <1>  pop ebp
   171 00000152 61                  <1>  popad
   171 00000153 E9B6FEFFFF          <1>  jmp getInput
   172                                  
   173                                  emptyStackErr:
   174                                  
   175                                  stackOverflowErr:
   176                                  
   177                                  finish:
   178 00000158 61                          popad
   179 00000159 89EC                        mov esp, ebp
   180 0000015B 5D                          pop ebp
   181                                  
   182 0000015C B801000000                  mov eax,1
   183 00000161 BB00000000                  mov ebx,0
   184 00000166 B900000000                  mov ecx,0
   185 0000016B BA00000000                  mov edx,0
   186 00000170 CD80                        int 0x80
   187                                  
   188                                  
   189                                  
