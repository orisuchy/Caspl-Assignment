     1                                  
     2                                  %macro initialFunc 0
     3                                      pushad
     4                                      push ebp
     5                                      mov ebp, esp
     6                                      inc dword [counter]
     7                                  %endmacro
     8                                  
     9                                  %macro finishingFunc 0
    10                                      mov esp, ebp
    11                                      pop ebp
    12                                      popad
    13                                      jmp getInput
    14                                  %endmacro
    15                                  section .bss
    16 00000000 <res 00000050>              input: resb 80            ; input - max 80 bytes
    17 00000050 <res 00000014>              opStack: resb 5*4         ; operands stack
    18 00000064 <res 00000004>              opSp: resb 4              ; operands stack pointer
    19 00000068 <res 00000004>              counter: resb 4           ; operation counter
    20 0000006C <res 00000004>              nPTR: resb 4
    21 00000070 <res 00000004>              index: resb 4
    22                                  section .data
    23                                  
    24                                  section .rodata
    25 00000000 0A63616C633A2000            pCalc: db 10, 'calc: ', 0
    26 00000008 44454255470A00              pDebug: db 'DEBUG',10, 0
    27 0000000F 2D2D2D2D2D2D2D2D0A-         pSemek: db '--------',10, 0
    27 00000018 00                 
    28                                      nData: equ 0
    29                                      nNext: equ 1
    30                                  
    31                                  section .text
    32                                    align 16
    33                                    global main
    34                                    extern printf
    35                                    extern fprintf
    36                                    extern fflush
    37                                    extern malloc
    38                                    extern calloc
    39                                    extern free
    40                                    extern gets
    41                                    extern getchar
    42                                    extern fgets
    43                                    extern stdin
    44                                  main:
    45 00000000 55                          push ebp
    46 00000001 89E5                        mov ebp, esp
    47                                      ;mov eax , opSp
    48 00000003 C705[64000000]-             mov [opSp], dword opStack ; initialize operand stack pointer
    48 00000009 [50000000]         
    49 0000000D 60                          pushad
    50                                  
    51                                  getInput:
    52                                  
    53 0000000E 68[00000000]                push dword pCalc
    54 00000013 E8(00000000)                call printf
    55 00000018 83C404                      add esp, 4                ; skip 1 param
    56 0000001B 61                          popad
    57                                  
    58 0000001C FF35[00000000]              push dword [stdin]        ; get first argument
    59 00000022 6A50                        push dword 80
    60 00000024 68[00000000]                push dword input
    61 00000029 E8(00000000)                call fgets                ; return into eax \ input variable
    62 0000002E 83C40C                      add esp, dword 12         ; ????????????????? WHAT THE HECK
    63                                  
    64 00000031 8A1D[00000000]              mov bl, byte [input]
    65                                  
    66 00000037 80FB71                      cmp bl,'q'                ; if input is quit
    67 0000003A 0F8410010000                je finish
    68                                  
    69 00000040 80FB2B                      cmp bl,'+'                ; if input is addition
    70 00000043 7459                        jz addition
    71                                  
    72 00000045 80FB64                      cmp bl,'d'                ; if input is duplicate
    73 00000048 0F8480000000                jz duplicate
    74                                  
    75 0000004E 80FB70                      cmp bl,'p'                ; if input is pop and print
    76 00000051 0F848A000000                jz popAndPrint
    77                                  
    78 00000057 80FB26                      cmp bl,'&'                ; if input bitwise and
    79 0000005A 0F84A4000000                jz bitwiseAnd
    80                                  
    81 00000060 80FB7C                      cmp bl,'|'                ; if input is or
    82 00000063 0F84AE000000                jz bitwiseOr
    83                                  
    84 00000069 80FB6E                      cmp bl,'n'                ; if input number of hexadecimal digits
    85 0000006C 0F84B8000000                jz numOfDigits
    86                                  
    87 00000072 80FB2A                      cmp bl,'*'                ; if input is multipication
    88 00000075 0F84C2000000                jz multipiction
    89                                  
    90                                      ; if reached here, input is a number
    91                                  isNum:
    92 0000007B A1[00000000]                mov eax, dword [input]                            ; numList pointer
    93 00000080 8B0D[64000000]              mov ecx, [opSp]
    94 00000086 8901                        mov [ecx],eax
    95 00000088 8305[64000000]04            add [opSp],dword 4
    96 0000008F 68[0F000000]                push pSemek
    97 00000094 E8(00000000)                call printf
    98 00000099 E970FFFFFF                  jmp getInput
    99                                  
   100                                  
   101                                  
   102                                  
   103                                  
   104                                  
   105                                  addition:
   106                                      initialFunc
   106 0000009E 60                  <1>  pushad
   106 0000009F 55                  <1>  push ebp
   106 000000A0 89E5                <1>  mov ebp, esp
   106 000000A2 FF05[68000000]      <1>  inc dword [counter]
   107 000000A8 A1[64000000]                mov eax ,dword [opSp]
   108 000000AD 83E804                      sub eax ,dword 4
   109 000000B0 8B00                        mov eax, [eax]
   110 000000B2 8B1D[64000000]              mov ebx ,dword [opSp]
   111 000000B8 83EB08                      sub ebx ,dword 8
   112 000000BB 8B1B                        mov ebx, [ebx]
   113 000000BD 01D8                        add eax, ebx
   114                                  
   115 000000BF 50                          push eax
   116 000000C0 E8(00000000)                call printf
   117                                      finishingFunc
   117 000000C5 89EC                <1>  mov esp, ebp
   117 000000C7 5D                  <1>  pop ebp
   117 000000C8 61                  <1>  popad
   117 000000C9 E940FFFFFF          <1>  jmp getInput
   118                                  duplicate:
   119                                      initialFunc
   119 000000CE 60                  <1>  pushad
   119 000000CF 55                  <1>  push ebp
   119 000000D0 89E5                <1>  mov ebp, esp
   119 000000D2 FF05[68000000]      <1>  inc dword [counter]
   120                                  
   121                                      finishingFunc
   121 000000D8 89EC                <1>  mov esp, ebp
   121 000000DA 5D                  <1>  pop ebp
   121 000000DB 61                  <1>  popad
   121 000000DC E92DFFFFFF          <1>  jmp getInput
   122                                  popAndPrint:
   123                                      initialFunc
   123 000000E1 60                  <1>  pushad
   123 000000E2 55                  <1>  push ebp
   123 000000E3 89E5                <1>  mov ebp, esp
   123 000000E5 FF05[68000000]      <1>  inc dword [counter]
   124 000000EB 8B0D[64000000]              mov ecx ,dword [opSp]
   125 000000F1 83E908                      sub ecx ,dword 8
   126 000000F4 FF31                        push dword [ecx]
   127 000000F6 E8(00000000)                call printf
   128                                      finishingFunc
   128 000000FB 89EC                <1>  mov esp, ebp
   128 000000FD 5D                  <1>  pop ebp
   128 000000FE 61                  <1>  popad
   128 000000FF E90AFFFFFF          <1>  jmp getInput
   129                                  
   130                                  bitwiseAnd:
   131                                      initialFunc
   131 00000104 60                  <1>  pushad
   131 00000105 55                  <1>  push ebp
   131 00000106 89E5                <1>  mov ebp, esp
   131 00000108 FF05[68000000]      <1>  inc dword [counter]
   132                                  
   133                                      finishingFunc
   133 0000010E 89EC                <1>  mov esp, ebp
   133 00000110 5D                  <1>  pop ebp
   133 00000111 61                  <1>  popad
   133 00000112 E9F7FEFFFF          <1>  jmp getInput
   134                                  
   135                                  bitwiseOr:
   136                                      initialFunc
   136 00000117 60                  <1>  pushad
   136 00000118 55                  <1>  push ebp
   136 00000119 89E5                <1>  mov ebp, esp
   136 0000011B FF05[68000000]      <1>  inc dword [counter]
   137                                  
   138                                      finishingFunc
   138 00000121 89EC                <1>  mov esp, ebp
   138 00000123 5D                  <1>  pop ebp
   138 00000124 61                  <1>  popad
   138 00000125 E9E4FEFFFF          <1>  jmp getInput
   139                                  
   140                                  numOfDigits:
   141                                      initialFunc
   141 0000012A 60                  <1>  pushad
   141 0000012B 55                  <1>  push ebp
   141 0000012C 89E5                <1>  mov ebp, esp
   141 0000012E FF05[68000000]      <1>  inc dword [counter]
   142                                  
   143                                      finishingFunc
   143 00000134 89EC                <1>  mov esp, ebp
   143 00000136 5D                  <1>  pop ebp
   143 00000137 61                  <1>  popad
   143 00000138 E9D1FEFFFF          <1>  jmp getInput
   144                                  
   145                                  
   146                                  multipiction:
   147                                      initialFunc
   147 0000013D 60                  <1>  pushad
   147 0000013E 55                  <1>  push ebp
   147 0000013F 89E5                <1>  mov ebp, esp
   147 00000141 FF05[68000000]      <1>  inc dword [counter]
   148                                  
   149                                      finishingFunc
   149 00000147 89EC                <1>  mov esp, ebp
   149 00000149 5D                  <1>  pop ebp
   149 0000014A 61                  <1>  popad
   149 0000014B E9BEFEFFFF          <1>  jmp getInput
   150                                  
   151                                  emptyStackErr:
   152                                  
   153                                  stackOverflowErr:
   154                                  
   155                                  finish:
   156                                      ; popad
   157 00000150 89EC                        mov esp, ebp
   158 00000152 5D                          pop ebp
   159                                  
   160 00000153 B801000000                  mov eax,1
   161 00000158 BB00000000                  mov ebx,0
   162 0000015D B900000000                  mov ecx,0
   163 00000162 BA00000000                  mov edx,0
   164 00000167 CD80                        int 0x80
   165                                  
   166                                  
   167                                  
