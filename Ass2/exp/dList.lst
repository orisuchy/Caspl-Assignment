     1                                  
     2                                  %macro initialFunc 0
     3                                      pushad
     4                                      push ebp
     5                                      mov ebp, esp
     6                                      inc dword [counter]
     7                                  %endmacro
     8                                  
     9                                  %macro finishingFunc 0
    10                                      mov esp, ebp
    11                                      pop ebp
    12                                      popad
    13                                      jmp getInput
    14                                  %endmacro
    15                                  section .bss
    16 00000000 <res 00000050>              input: resb 80            ; input - max 80 bytes
    17 00000050 <res 00000014>              opStack: resb 5*4         ; operands stack
    18 00000064 <res 00000004>              opSp: resb 4              ; operands stack pointer
    19 00000068 <res 00000004>              counter: resb 4           ; operation counter
    20 0000006C <res 00000004>              nPTR: resb 4
    21 00000070 <res 00000004>              index: resb 4
    22                                  section .data
    23                                  
    24                                  section .rodata
    25 00000000 5C6E63616C633A2000          pCalc: db '\ncalc: ', 0
    26 00000009 44454255470A00              pDebug: db 'DEBUG',10, 0
    27                                      nData: equ 0
    28                                      nNext: equ 1
    29                                  
    30                                  section .text
    31                                    align 16
    32                                    global main
    33                                    extern printf
    34                                    extern fprintf
    35                                    extern fflush
    36                                    extern malloc
    37                                    extern calloc
    38                                    extern free
    39                                    extern gets
    40                                    extern getchar
    41                                    extern fgets
    42                                    extern stdin
    43                                  main:
    44 00000000 55                          push ebp
    45 00000001 89E5                        mov ebp, esp
    46                                      ;mov eax , opSp
    47 00000003 C705[64000000]-             mov [opSp], dword opStack ; initialize operand stack pointer
    47 00000009 [50000000]         
    48 0000000D 60                          pushad
    49                                  
    50                                  getInput:
    51                                  
    52 0000000E 68[00000000]                push dword pCalc
    53 00000013 E8(00000000)                call printf
    54 00000018 83C404                      add esp, 4                ; skip 1 param
    55 0000001B 61                          popad
    56                                  
    57 0000001C FF35[00000000]              push dword [stdin]        ; get first argument
    58 00000022 6A50                        push dword 80
    59 00000024 68[00000000]                push dword input
    60 00000029 E8(00000000)                call fgets                ; return into eax \ input variable
    61 0000002E 83C40C                      add esp, dword 12         ; ????????????????? WHAT THE HECK
    62                                  
    63 00000031 8A1D[00000000]              mov bl, byte [input]
    64                                  
    65 00000037 80FB71                      cmp bl,'q'                ; if input is quit
    66 0000003A 0F84DB000000                je finish
    67                                  
    68 00000040 80FB2B                      cmp bl,'+'                ; if input is addition
    69 00000043 7446                        jz addition
    70                                  
    71 00000045 80FB64                      cmp bl,'d'                ; if input is duplicate
    72 00000048 745F                        jz duplicate
    73                                  
    74 0000004A 80FB70                      cmp bl,'p'                ; if input is pop and print
    75 0000004D 746D                        jz popAndPrint
    76                                  
    77 0000004F 80FB26                      cmp bl,'&'                ; if input bitwise and
    78 00000052 747B                        jz bitwiseAnd
    79                                  
    80 00000054 80FB7C                      cmp bl,'|'                ; if input is or
    81 00000057 0F8485000000                jz bitwiseOr
    82                                  
    83 0000005D 80FB6E                      cmp bl,'n'                ; if input number of hexadecimal digits
    84 00000060 0F848F000000                jz numOfDigits
    85                                  
    86 00000066 80FB2A                      cmp bl,'*'                ; if input is multipication
    87 00000069 0F8499000000                jz multipiction
    88                                  
    89                                      ; if reached here, input is a number
    90                                  
    91 0000006F 8B1D[64000000]              mov ebx, [opSp]
    92 00000075 C703[00000000]              mov [ebx], dword input
    93 0000007B 83C304                      add ebx, dword 4
    94 0000007E A1[50000000]                mov eax ,[opStack]
    95 00000083 50                          push eax
    96 00000084 E8(00000000)                call printf
    97 00000089 EB83                        jmp getInput
    98                                  
    99                                  
   100                                  
   101                                  
   102                                  
   103                                  
   104                                  addition:
   105                                      initialFunc
   105 0000008B 60                  <1>  pushad
   105 0000008C 55                  <1>  push ebp
   105 0000008D 89E5                <1>  mov ebp, esp
   105 0000008F FF05[68000000]      <1>  inc dword [counter]
   106 00000095 A1[64000000]                mov eax ,dword [opSp]
   107 0000009A 50                          push eax
   108 0000009B E8(00000000)                call printf
   109                                      finishingFunc
   109 000000A0 89EC                <1>  mov esp, ebp
   109 000000A2 5D                  <1>  pop ebp
   109 000000A3 61                  <1>  popad
   109 000000A4 E965FFFFFF          <1>  jmp getInput
   110                                  duplicate:
   111                                      initialFunc
   111 000000A9 60                  <1>  pushad
   111 000000AA 55                  <1>  push ebp
   111 000000AB 89E5                <1>  mov ebp, esp
   111 000000AD FF05[68000000]      <1>  inc dword [counter]
   112                                  
   113                                      finishingFunc
   113 000000B3 89EC                <1>  mov esp, ebp
   113 000000B5 5D                  <1>  pop ebp
   113 000000B6 61                  <1>  popad
   113 000000B7 E952FFFFFF          <1>  jmp getInput
   114                                  popAndPrint:
   115                                      initialFunc
   115 000000BC 60                  <1>  pushad
   115 000000BD 55                  <1>  push ebp
   115 000000BE 89E5                <1>  mov ebp, esp
   115 000000C0 FF05[68000000]      <1>  inc dword [counter]
   116                                  
   117                                      finishingFunc
   117 000000C6 89EC                <1>  mov esp, ebp
   117 000000C8 5D                  <1>  pop ebp
   117 000000C9 61                  <1>  popad
   117 000000CA E93FFFFFFF          <1>  jmp getInput
   118                                  
   119                                  bitwiseAnd:
   120                                      initialFunc
   120 000000CF 60                  <1>  pushad
   120 000000D0 55                  <1>  push ebp
   120 000000D1 89E5                <1>  mov ebp, esp
   120 000000D3 FF05[68000000]      <1>  inc dword [counter]
   121                                  
   122                                      finishingFunc
   122 000000D9 89EC                <1>  mov esp, ebp
   122 000000DB 5D                  <1>  pop ebp
   122 000000DC 61                  <1>  popad
   122 000000DD E92CFFFFFF          <1>  jmp getInput
   123                                  
   124                                  bitwiseOr:
   125                                      initialFunc
   125 000000E2 60                  <1>  pushad
   125 000000E3 55                  <1>  push ebp
   125 000000E4 89E5                <1>  mov ebp, esp
   125 000000E6 FF05[68000000]      <1>  inc dword [counter]
   126                                  
   127                                      finishingFunc
   127 000000EC 89EC                <1>  mov esp, ebp
   127 000000EE 5D                  <1>  pop ebp
   127 000000EF 61                  <1>  popad
   127 000000F0 E919FFFFFF          <1>  jmp getInput
   128                                  
   129                                  numOfDigits:
   130                                      initialFunc
   130 000000F5 60                  <1>  pushad
   130 000000F6 55                  <1>  push ebp
   130 000000F7 89E5                <1>  mov ebp, esp
   130 000000F9 FF05[68000000]      <1>  inc dword [counter]
   131                                  
   132                                      finishingFunc
   132 000000FF 89EC                <1>  mov esp, ebp
   132 00000101 5D                  <1>  pop ebp
   132 00000102 61                  <1>  popad
   132 00000103 E906FFFFFF          <1>  jmp getInput
   133                                  
   134                                  
   135                                  multipiction:
   136                                      initialFunc
   136 00000108 60                  <1>  pushad
   136 00000109 55                  <1>  push ebp
   136 0000010A 89E5                <1>  mov ebp, esp
   136 0000010C FF05[68000000]      <1>  inc dword [counter]
   137                                  
   138                                      finishingFunc
   138 00000112 89EC                <1>  mov esp, ebp
   138 00000114 5D                  <1>  pop ebp
   138 00000115 61                  <1>  popad
   138 00000116 E9F3FEFFFF          <1>  jmp getInput
   139                                  
   140                                  emptyStackErr:
   141                                  
   142                                  stackOverflowErr:
   143                                  
   144                                  finish:
   145                                      ; popad
   146 0000011B 89EC                        mov esp, ebp
   147 0000011D 5D                          pop ebp
   148                                  
   149 0000011E B801000000                  mov eax,1
   150 00000123 BB00000000                  mov ebx,0
   151 00000128 B900000000                  mov ecx,0
   152 0000012D BA00000000                  mov edx,0
   153 00000132 CD80                        int 0x80
   154                                  
   155                                  
   156                                  
